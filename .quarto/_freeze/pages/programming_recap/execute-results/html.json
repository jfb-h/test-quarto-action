{
  "hash": "eaa0df9e721d873b5a16cecfd910a4a9",
  "result": {
    "markdown": "---\ntitle: Programming Basics\ndate: 01/13/2023\nformat:\n  html:\n    code-fold: true\n    code-summary: Solution\n---\n\n### Exercise 1\n\nWrite a function that takes in a name and prints out a greeting, e.g., \"Hello, Daniel\".\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\ngreet(name) = println(\"Hello, $(name)!\")\ngreet(\"Daniel\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Daniel!\n```\n:::\n:::\n\n\n### Exercise 2\n\nWrite a function which greets the users whose name starts with a 'D' in Spanish, users whose name starts with a 'C' in German, and everyone else in English. \n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nfunction greet(name)\n    firstletter = first(name)\n    if firstletter == 'D'\n        println(\"Hola, $(name)!\")\n    elseif firstletter == 'C'\n        println(\"Hallo, $(name)!\")\n    else\n        println(\"Hello, $(name)!\")\n    end\nend\n\ngreet(\"Denise\")\ngreet(\"Clara\")\ngreet(\"Marius\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHola, Denise!\nHallo, Clara!\nHello, Marius!\n```\n:::\n:::\n\n\n### Exercise 3\n\nWrite a function which takes an array of numbers as input and returns their sum, without using the built-in function `sum`.\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfunction mysum(arr)\n    res = zero(eltype(arr))\n    for x in arr\n        res += x\n    end\n    res\nend\n\n@show mysum([1,2,3,4,5]);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmysum([1, 2, 3, 4, 5]) = 15\n```\n:::\n:::\n\n\n### Exercise 4\n\nWrite a function which takes an array of numbers as input and returns their sum of squares.\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nsum_of_squares(arr) = sum(x -> x^2, arr) \n# or mapreduce(x -> x^2, +, arr)\n@show sum_of_squares([1,2,3]);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsum_of_squares([1, 2, 3]) = 14\n```\n:::\n:::\n\n\n### Exercise 5\n\nWrite a function which takes an array of numbers as input and returns the largest element.\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nlargest_element(arr) = findmax(arr)[1]\n@show largest_element([5,2,1,7]);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlargest_element([5, 2, 1, 7]) = 7\n```\n:::\n:::\n\n\n### Exercise 6\n\nWrite a function which takes an array of numbers as input and returns only those elements which are $>5$. In a second step, write a more generic version which takes the limit as a second argument.\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\ngreater_5(arr) = filter(>(5), arr)\ngreater_k(arr, k) = filter(>(k), arr)\n\n@show greater_5([1,2,3,4,5,6,7,8]);\n@show greater_k([1,2,3,4,5,6,7,8], 2);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngreater_5([1, 2, 3, 4, 5, 6, 7, 8]) = [6, 7, 8]\ngreater_k([1, 2, 3, 4, 5, 6, 7, 8], 2) = [3, 4, 5, 6, 7, 8]\n```\n:::\n:::\n\n\n### Exercise 7\n\nWrite a function which checks if an element is contained in an array.\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nx_in_arr(x, arr) = x in arr\n\n@show x_in_arr(\"Daniel\", [\"Denise\", \"Daniel\", \"Jakob\"]);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx_in_arr(\"Daniel\", [\"Denise\", \"Daniel\", \"Jakob\"]) = true\n```\n:::\n:::\n\n\n### Exercise 8\n\nWrite a function which takes a Matrix as input and returns the column-wise sums. In a second step, write a more generic version which takes an arbitrary reduction function (such as sum) as an additional argument and performs it column-wise.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\ncolsum(m) = sum(m; dims=1)\ncolop(op, m) = map(op, eachcol(m))\n\n@show colsum([1 2; 3 4]);\n@show colop(sum, [1 2; 3 4]);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncolsum([1 2; 3 4]) = [4 6]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\ncolop(sum, [1 2; 3 4]) = [4, 6]\n```\n:::\n:::\n\n\n### Exercise 9\n\nWrite a function that concatenates two arrays. In a second step, write a function which concatenates two $n$-element arrays into a $n \\times 2$ matrix.\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nconcatenate(a, b) = vcat(a, b)\nconcatenate_matrix(a, b) = hcat(a, b)\n\n@show concatenate([1,2], [3,4,5]);\n@show concatenate_matrix([1,2,3], [4,5,6]);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nconcatenate([1, 2], [3, 4, 5]) = [1, 2, 3, 4, 5]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nconcatenate_matrix([1, 2, 3], [4, 5, 6]) = [1 4; 2 5; 3 6]\n```\n:::\n:::\n\n\n### Exercise 10\n\nWrite a function that takes a number and returns a function which multiplies its input by that number. Apply the generated function to each element of an array of 5 randomly generated numbers.\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\ngenerate_mul_by_k(k) = x -> x * k\n\nmul_by_3 = generate_mul_by_k(3)\nmap(mul_by_3, rand(5))\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n5-element Vector{Float64}:\n 1.95644381850513\n 0.07193503533563606\n 2.1560512217887497\n 2.660153607468851\n 2.7452236902465983\n```\n:::\n:::\n\n\n",
    "supporting": [
      "programming_recap_files"
    ],
    "filters": [],
    "includes": {}
  }
}