{"title":"Programming Basics","markdown":{"yaml":{"title":"Programming Basics","date":"01/13/2023","format":{"html":{"code-fold":true,"code-summary":"Solution"}},"jupyter":"julia-1.8"},"headingText":"Exercise 1","containsRefs":false,"markdown":"\n\n\nWrite a function that takes in a name and prints out a greeting, e.g., \"Hello, Daniel\".\n\n\n```{julia}\ngreet(name) = println(\"Hello, $(name)!\")\ngreet(\"Daniel\")\n```\n\n\n### Exercise 2\n\nWrite a function which greets the users whose name starts with a 'D' in Spanish, users whose name starts with a 'C' in German, and everyone else in English. \n\n\n```{julia}\nfunction greet(name)\n    firstletter = first(name)\n    if firstletter == 'D'\n        println(\"Hola, $(name)!\")\n    elseif firstletter == 'C'\n        println(\"Hallo, $(name)!\")\n    else\n        println(\"Hello, $(name)!\")\n    end\nend\n\ngreet(\"Denise\")\ngreet(\"Clara\")\ngreet(\"Marius\")\n```\n\n### Exercise 3\n\nWrite a function which takes an array of numbers as input and returns their sum, without using the built-in function `sum`.\n\n\n```{julia}\nfunction mysum(arr)\n    res = zero(eltype(arr))\n    for x in arr\n        res += x\n    end\n    res\nend\n\n@show mysum([1,2,3,4,5]);\n```\n\n\n### Exercise 4\n\nWrite a function which takes an array of numbers as input and returns their sum of squares.\n\n\n```{julia}\nsum_of_squares(arr) = sum(x -> x^2, arr) \n# or mapreduce(x -> x^2, +, arr)\n@show sum_of_squares([1,2,3]);\n```\n\n### Exercise 5\n\nWrite a function which takes an array of numbers as input and returns the largest element.\n\n\n```{julia}\nlargest_element(arr) = findmax(arr)[1]\n@show largest_element([5,2,1,7]);\n```\n\n\n### Exercise 6\n\nWrite a function which takes an array of numbers as input and returns only those elements which are $>5$. In a second step, write a more generic version which takes the limit as a second argument.\n\n\n```{julia}\ngreater_5(arr) = filter(>(5), arr)\ngreater_k(arr, k) = filter(>(k), arr)\n\n@show greater_5([1,2,3,4,5,6,7,8]);\n@show greater_k([1,2,3,4,5,6,7,8], 2);\n```\n\n### Exercise 7\n\nWrite a function which checks if an element is contained in an array.\n\n\n```{julia}\nx_in_arr(x, arr) = x in arr\n\n@show x_in_arr(\"Daniel\", [\"Denise\", \"Daniel\", \"Jakob\"]);\n```\n\n### Exercise 8\n\nWrite a function which takes a Matrix as input and returns the column-wise sums. In a second step, write a more generic version which takes an arbitrary reduction function (such as sum) as an additional argument and performs it column-wise.\n\n\n```{julia}\ncolsum(m) = sum(m; dims=1)\ncolop(op, m) = map(op, eachcol(m))\n\n@show colsum([1 2; 3 4]);\n@show colop(sum, [1 2; 3 4]);\n```\n\n### Exercise 9\n\nWrite a function that concatenates two arrays. In a second step, write a function which concatenates two $n$-element arrays into a $n \\times 2$ matrix.\n\n```{julia}\n\nconcatenate(a, b) = vcat(a, b)\nconcatenate_matrix(a, b) = hcat(a, b)\n\n@show concatenate([1,2], [3,4,5]);\n@show concatenate_matrix([1,2,3], [4,5,6]);\n```\n\n### Exercise 10\n\nWrite a function that takes a number and returns a function which multiplies its input by that number. Apply the generated function to each element of an array of 5 randomly generated numbers.\n\n```{julia}\n\ngenerate_mul_by_k(k) = x -> x * k\n\nmul_by_3 = generate_mul_by_k(3)\nmap(mul_by_3, rand(5))\n```"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"programming_recap.html"},"language":{"code-summary":"Solution"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","theme":"lux","title":"Programming Basics","date":"01/13/2023","jupyter":"julia-1.8"},"extensions":{"book":{"multiFile":true}}}}}